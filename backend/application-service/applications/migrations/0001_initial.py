# Generated by Django 4.2.7 on 2025-08-27 10:27

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_id', models.BigIntegerField(help_text='Job ID from job-service')),
                ('applicant_id', models.BigIntegerField(help_text='User ID of the applicant (from user-service)')),
                ('employer_id', models.BigIntegerField(help_text='User ID of the employer (from user-service)')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('reviewing', 'Under Review'), ('shortlisted', 'Shortlisted'), ('interviewing', 'Interviewing'), ('offered', 'Offer Made'), ('hired', 'Hired'), ('rejected', 'Rejected'), ('withdrawn', 'Withdrawn')], default='pending', help_text='Application status', max_length=50)),
                ('cover_letter', models.TextField(blank=True, help_text='Cover letter')),
                ('expected_salary', models.DecimalField(blank=True, decimal_places=2, help_text='Expected salary', max_digits=10, null=True)),
                ('availability_date', models.DateField(blank=True, help_text='Availability date', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the application is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Application',
                'verbose_name_plural': 'Applications',
                'db_table': 'applications',
                'ordering': ['-created_at'],
                'unique_together': {('job_id', 'applicant_id')},
            },
        ),
        migrations.CreateModel(
            name='Interview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interview_type', models.CharField(choices=[('phone', 'Phone Interview'), ('video', 'Video Interview'), ('in_person', 'In-Person Interview')], default='phone', help_text='Type of interview', max_length=50)),
                ('scheduled_at', models.DateTimeField(blank=True, help_text='Scheduled interview time', null=True)),
                ('duration_minutes', models.IntegerField(default=60, help_text='Interview duration in minutes')),
                ('location', models.CharField(blank=True, help_text='Interview location or meeting link', max_length=255)),
                ('notes', models.TextField(blank=True, help_text='Interview notes')),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('rescheduled', 'Rescheduled')], default='scheduled', help_text='Interview status', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('application', models.ForeignKey(help_text='Related application', on_delete=django.db.models.deletion.CASCADE, related_name='interviews', to='applications.application')),
            ],
            options={
                'verbose_name': 'Interview',
                'verbose_name_plural': 'Interviews',
                'db_table': 'interviews',
                'ordering': ['-scheduled_at'],
            },
        ),
        migrations.CreateModel(
            name='ApplicationStatusHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(help_text='Status at this point', max_length=50)),
                ('notes', models.TextField(blank=True, help_text='Notes about the status change')),
                ('changed_by', models.BigIntegerField(help_text='User ID who made the change (from user-service)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('application', models.ForeignKey(help_text='Related application', on_delete=django.db.models.deletion.CASCADE, related_name='status_history', to='applications.application')),
            ],
            options={
                'verbose_name': 'Application Status History',
                'verbose_name_plural': 'Application Status Histories',
                'db_table': 'application_status_history',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ApplicationAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(help_text='Original file name', max_length=255)),
                ('file_path', models.CharField(help_text='File path in storage', max_length=500)),
                ('file_type', models.CharField(blank=True, help_text='File MIME type', max_length=100)),
                ('file_size', models.IntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('application', models.ForeignKey(help_text='Related application', on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='applications.application')),
            ],
            options={
                'verbose_name': 'Application Attachment',
                'verbose_name_plural': 'Application Attachments',
                'db_table': 'application_attachments',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('job_seeker', 'Job Seeker'), ('employer', 'Employer'), ('admin', 'Admin')], default='job_seeker', max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('profile_picture', models.URLField(blank=True, null=True)),
                ('bio', models.TextField(blank=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
